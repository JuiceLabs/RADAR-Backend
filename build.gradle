plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'
    id 'application'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
    id "com.avast.gradle.docker-compose" version "0.3.16"
    id "com.jfrog.bintray" version "1.7.3"
    id 'maven-publish'
}

//---------------------------------------------------------------------------//
// Configuration                                                             //
//---------------------------------------------------------------------------//

version = '0.1-alpha.2'

mainClassName = 'org.radarcns.RadarBackend'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

ext.boundaryVersion = '1.0.6'
ext.codacyVersion = '1.0.10'
ext.confluentVersion = '3.1.2'
ext.hamcrestVersion = '1.3'
ext.kafkaVersion = '0.10.1.1'
ext.jacksonVersion='2.8.5'
ext.javaMailVersion = '1.5.6'
ext.junitVersion = '4.12'
ext.mathVersion = '3.0'
ext.findbugVersion = '3.0.1'
ext.commonsCliVersion = '1.2'
ext.mockitoVersion = '2.2.29'
ext.radarCommonsVersion = '0.1-alpha.4'
ext.subethamailVersion = '3.1.7'

//---------------------------------------------------------------------------//
// Sources and classpath configurations                                      //
//---------------------------------------------------------------------------//

sourceSets {
    // Note that just declaring this sourceset creates two configurations.
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
    }
}

configurations {
    codacy
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'http://dl.bintray.com/typesafe/maven-releases' }

}

// In this section you declare the dependencies for your production and test code
dependencies {

    compile group: 'org.radarcns', name: 'radar-commons', version: radarCommonsVersion

    compile group: 'org.apache.kafka', name: 'kafka-streams', version: kafkaVersion
    compile group: 'com.google.code.findbugs' , name: 'jsr305' , version: findbugVersion
    compile group: 'commons-cli', name: 'commons-cli', version: commonsCliVersion
    compile group: 'com.boundary', name: 'high-scale-lib', version: boundaryVersion
    compile group: 'org.apache.commons', name: 'commons-math3', version: mathVersion
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion
    compile group: 'javax.mail', name: 'javax.mail-api', version: javaMailVersion
    compile group: 'com.sun.mail', name: 'javax.mail', version: javaMailVersion


    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
    testCompile group: 'org.subethamail', name: 'subethasmtp', version: subethamailVersion

    codacy group: 'com.github.codacy', name: 'codacy-coverage-reporter', version: codacyVersion
}

//---------------------------------------------------------------------------//
// Packaging                                                                 //
//---------------------------------------------------------------------------//
jar {
    manifest {
        attributes 'Implementation-Title': 'RADAR-CNS Back-End',
                    'Implementation-Version': version,
                    'Main-Class': mainClassName
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//---------------------------------------------------------------------------//
// Style checking                                                            //
//---------------------------------------------------------------------------//

checkstyle {
    // codacy version
    toolVersion '6.16'
    ignoreFailures false

    // ignore tests
    sourceSets = [sourceSets.main]
}

pmd {
    // codacy version
    toolVersion = '5.5.2'
    ignoreFailures = false

    // ignore tests
    sourceSets = [sourceSets.main]

    consoleOutput = true

    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

tasks.withType(Pmd) {
    exclude '**/org/radarcns/config/ConfigRadar.java'
}

//---------------------------------------------------------------------------//
// Testing                                                                   //
//---------------------------------------------------------------------------//

tasks.matching {it instanceof Test}.all {
    def stdout = new LinkedList<String>()
    beforeTest { TestDescriptor td ->
        stdout.clear()
    }

    onOutput { TestDescriptor td, TestOutputEvent toe ->
        stdout.addAll(toe.getMessage().split('(?m)$'))
        while (stdout.size() > 100) {
            stdout.remove()
        }
    }

    afterTest { TestDescriptor td, TestResult tr ->
        if (tr.resultType == TestResult.ResultType.FAILURE) {
            println()
            print("${td.className}.${td.name} FAILED")
            if (stdout.empty) {
                println(" without any output")
            } else {
                println(" with last 100 lines of output:")
                println('=' * 100)
                stdout.each { print(it) }
                println('=' * 100)
            }
        }
    }

    testLogging {
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat "full"
    }
}

task integrationTest(type: Test){
    description = "Run integration tests (located in src/integrationTest/...)."
    testClassesDir project.sourceSets.integrationTest.output.classesDir
    classpath = project.sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTestClasses

//---------------------------------------------------------------------------//
// Code coverage and codacy                                                  //
//---------------------------------------------------------------------------//

jacocoTestReport {
    executionData test, integrationTest
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task downloadDependencies(type: Exec) {
    configurations.testRuntime.files
    configurations.codacy.files
    configurations.jacocoAnt.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//
idea {
    module {
        downloadSources = true
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "RADAR-CNS - Distributions"
        }
    }
    developers {
        developer {
            id "radar-cns"
            name "Nivethika"
            email "nivethika@thehyve.nl"
        }
    }
}
// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}


publishing {
    publications {
        RadarBackendPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'org.radarcns'
            artifactId 'radar-backend'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Kafka backend for processing device data.')
                root.appendNode('name', 'radar-backend')
                root.appendNode('url', 'https://github.com/RADAR-CNS/RADAR-Backend.git')
                root.children().last() + pomConfig
            }
        }
    }
}



bintray {
    user = System.getenv('BINTRAY_USER')? System.getenv('BINTRAY_USER') : project.property('bintrayUser')
    key = System.getenv('BINTRAY_API_KEY') ? System.getenv('BINTRAY_API_KEY') : project.property('bintrayApiKey')
    override = false
    publications = ['RadarBackendPublication']
    pkg {
        repo = 'org.radarcns'
        name = 'radar-backend'
        userOrg = 'radar-cns'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/RADAR-CNS/RADAR-Backend.git'
        version {
            name = project.version
            desc = 'Kafka backend for processing device data : Alpha release'
            vcsTag = System.getenv('TRAVIS_TAG')
            released  = new Date()
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
    distributionUrl distributionUrl.replace("bin", "all")
}

run {
    if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'
    id 'application'
    id 'com.commercehub.gradle.plugin.avro-base' version '0.9.0'
    id 'jacoco'
    id 'pmd'
    id 'checkstyle'
    id "com.avast.gradle.docker-compose" version "0.3.16"
}

//---------------------------------------------------------------------------//
// Configuration                                                             //
//---------------------------------------------------------------------------//

version = '0.1'

mainClassName = 'org.radarcns.RadarBackend'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

ext.slf4jVersion = '1.7.21'
ext.kafkaVersion = '0.10.1.0'
ext.avroVersion = '1.8.1'
ext.confluentVersion = '3.1.1'
ext.log4jVersion = '2.7'
ext.mongodbVersion = '3.3.0'
ext.findbugsVersion = '3.0.1'
ext.boundaryVersion = '1.0.6'
ext.mathVersion = '3.0'
ext.jacksonVersion='2.8.5'
ext.javaMailVersion = '1.5.6'
ext.junitVersion = '4.12'
ext.mockitoVersion = '2.2.29'
ext.okhttpVersion = '3.4.1'
ext.subethamailVersion = '3.1.7'
ext.codacyVersion = '1.0.10'

//---------------------------------------------------------------------------//
// Sources and classpath configurations                                      //
//---------------------------------------------------------------------------//

sourceSets {
    // Note that just declaring this sourceset creates two configurations.
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
    }
}

configurations {
    codacy
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    connectorMongo
    connectorHDFS
    compile.extendsFrom connectorMongo
    compile.extendsFrom connectorHDFS
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
    flatDir {
        dirs 'libs'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile group: 'org.slf4j', name:'slf4j-api', version: slf4jVersion

    // to implement producers and consumers
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion
    compile group: 'org.apache.kafka', name: 'kafka-streams', version: kafkaVersion
    compile group: 'org.apache.avro', name: 'avro', version: avroVersion
    compile group: 'io.confluent', name: 'kafka-avro-serializer', version: confluentVersion
    connectorHDFS (group: 'io.confluent', name: 'kafka-connect-hdfs', version: confluentVersion) {
        exclude group: 'org.apache.hive'
    }
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: findbugsVersion
    compile group: 'com.boundary', name: 'high-scale-lib', version: boundaryVersion
    compile group: 'org.apache.commons', name: 'commons-math3', version: mathVersion
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion
    compile group: 'javax.mail', name: 'javax.mail-api', version: javaMailVersion
    compile group: 'com.sun.mail', name: 'javax.mail', version: javaMailVersion

    connectorMongo group: "org.radarcns", name: 'kafka-connect-mongodb-sink', version: '0.1-SNAPSHOT'
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion

    integrationTestCompile group: 'org.subethamail', name: 'subethasmtp', version: subethamailVersion

    codacy group: 'com.github.codacy', name: 'codacy-coverage-reporter', version: codacyVersion
}

//---------------------------------------------------------------------------//
// AVRO file manipulation                                                    //
//---------------------------------------------------------------------------//


task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("build/avro")
}

compileJava.source(generateAvro.outputs)
idea.module.sourceDirs += file("build/avro")

//---------------------------------------------------------------------------//
// Packaging                                                                 //
//---------------------------------------------------------------------------//

task connectorMongoJar(type: Jar) {
    from {
        configurations.connectorMongo.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from(sourceSets.main.output) {
        include "org/radarcns/sink/mongodb/*"
    }
    from("${buildDir}/avro/") {
        include "org/radarcns/**"
    }
    archiveName = "radar-mongodb-connector-${version}.jar"
}

task connectorHDFSJar(type: Jar) {
    from(sourceSets.main.output) {
        include "org/radarcns/sink/hdfs/*"
    }
    archiveName = "radar-hdfs-connector-${version}.jar"
}

jar {
    manifest {
        attributes 'Implementation-Title': 'RADAR-CNS Back-End',
                    'Implementation-Version': version,
                    'Main-Class': mainClassName
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
jar.dependsOn connectorMongoJar
jar.dependsOn connectorHDFSJar

//---------------------------------------------------------------------------//
// Style checking                                                            //
//---------------------------------------------------------------------------//

checkstyle {
    // codacy version
    toolVersion '6.16'
    ignoreFailures false

    // ignore tests
    sourceSets = [sourceSets.main]
}

pmd {
    // codacy version
    toolVersion = '5.5.2'
    ignoreFailures = false

    // ignore tests
    sourceSets = [sourceSets.main]

    consoleOutput = true

    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

//---------------------------------------------------------------------------//
// Testing                                                                   //
//---------------------------------------------------------------------------//

tasks.matching {it instanceof Test}.all {
    def stdout = new LinkedList<String>()
    beforeTest { TestDescriptor td ->
        stdout.clear()
    }

    onOutput { TestDescriptor td, TestOutputEvent toe ->
        stdout.addAll(toe.getMessage().split('(?m)$'))
        while (stdout.size() > 100) {
            stdout.remove()
        }
    }

    afterTest { TestDescriptor td, TestResult tr ->
        if (tr.resultType == TestResult.ResultType.FAILURE) {
            println()
            print("${td.className}.${td.name} FAILED")
            if (stdout.empty) {
                println(" without any output")
            } else {
                println(" with last 100 lines of output:")
                println('=' * 100)
                stdout.each { print(it) }
                println('=' * 100)
            }
        }
    }

    testLogging {
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat "full"
    }
}

task integrationTest(type: Test){
    description = "Run integration tests (located in src/integrationTest/...)."
    testClassesDir project.sourceSets.integrationTest.output.classesDir
    classpath = project.sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTestClasses

//---------------------------------------------------------------------------//
// Code coverage and codacy                                                  //
//---------------------------------------------------------------------------//

jacocoTestReport {
    executionData test, integrationTest
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task downloadDependencies(type: Exec) {
    configurations.testRuntime.files
    configurations.codacy.files
    configurations.jacocoAnt.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//
idea {
    module {
        downloadSources = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
    distributionUrl distributionUrl.replace("bin", "all")
}

run {
    if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }
}

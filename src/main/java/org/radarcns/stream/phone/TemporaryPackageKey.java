/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.stream.phone;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TemporaryPackageKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8584100260725184052L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemporaryPackageKey\",\"namespace\":\"org.radarcns.stream.phone\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"record\",\"name\":\"MeasurementKey\",\"namespace\":\"org.radarcns.key\",\"doc\":\"Key of an observation.\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User Identifier created during the enrolment.\"},{\"name\":\"sourceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier associated with the source.\"}]},\"doc\":\"Observation key.\"},{\"name\":\"packageName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Package name.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TemporaryPackageKey> ENCODER =
      new BinaryMessageEncoder<TemporaryPackageKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TemporaryPackageKey> DECODER =
      new BinaryMessageDecoder<TemporaryPackageKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TemporaryPackageKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TemporaryPackageKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TemporaryPackageKey>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TemporaryPackageKey to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TemporaryPackageKey from a ByteBuffer. */
  public static TemporaryPackageKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Observation key. */
  @Deprecated public org.radarcns.key.MeasurementKey key;
  /** Package name. */
  @Deprecated public java.lang.String packageName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TemporaryPackageKey() {}

  /**
   * All-args constructor.
   * @param key Observation key.
   * @param packageName Package name.
   */
  public TemporaryPackageKey(org.radarcns.key.MeasurementKey key, java.lang.String packageName) {
    this.key = key;
    this.packageName = packageName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return packageName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (org.radarcns.key.MeasurementKey)value$; break;
    case 1: packageName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return Observation key.
   */
  public org.radarcns.key.MeasurementKey getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * Observation key.
   * @param value the value to set.
   */
  public void setKey(org.radarcns.key.MeasurementKey value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'packageName' field.
   * @return Package name.
   */
  public java.lang.String getPackageName() {
    return packageName;
  }

  /**
   * Sets the value of the 'packageName' field.
   * Package name.
   * @param value the value to set.
   */
  public void setPackageName(java.lang.String value) {
    this.packageName = value;
  }

  /**
   * Creates a new TemporaryPackageKey RecordBuilder.
   * @return A new TemporaryPackageKey RecordBuilder
   */
  public static org.radarcns.stream.phone.TemporaryPackageKey.Builder newBuilder() {
    return new org.radarcns.stream.phone.TemporaryPackageKey.Builder();
  }

  /**
   * Creates a new TemporaryPackageKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TemporaryPackageKey RecordBuilder
   */
  public static org.radarcns.stream.phone.TemporaryPackageKey.Builder newBuilder(org.radarcns.stream.phone.TemporaryPackageKey.Builder other) {
    return new org.radarcns.stream.phone.TemporaryPackageKey.Builder(other);
  }

  /**
   * Creates a new TemporaryPackageKey RecordBuilder by copying an existing TemporaryPackageKey instance.
   * @param other The existing instance to copy.
   * @return A new TemporaryPackageKey RecordBuilder
   */
  public static org.radarcns.stream.phone.TemporaryPackageKey.Builder newBuilder(org.radarcns.stream.phone.TemporaryPackageKey other) {
    return new org.radarcns.stream.phone.TemporaryPackageKey.Builder(other);
  }

  /**
   * RecordBuilder for TemporaryPackageKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemporaryPackageKey>
    implements org.apache.avro.data.RecordBuilder<TemporaryPackageKey> {

    /** Observation key. */
    private org.radarcns.key.MeasurementKey key;
    private org.radarcns.key.MeasurementKey.Builder keyBuilder;
    /** Package name. */
    private java.lang.String packageName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.stream.phone.TemporaryPackageKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (other.hasKeyBuilder()) {
        this.keyBuilder = org.radarcns.key.MeasurementKey.newBuilder(other.getKeyBuilder());
      }
      if (isValidValue(fields()[1], other.packageName)) {
        this.packageName = data().deepCopy(fields()[1].schema(), other.packageName);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TemporaryPackageKey instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.stream.phone.TemporaryPackageKey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      this.keyBuilder = null;
      if (isValidValue(fields()[1], other.packageName)) {
        this.packageName = data().deepCopy(fields()[1].schema(), other.packageName);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * Observation key.
      * @return The value.
      */
    public org.radarcns.key.MeasurementKey getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * Observation key.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public org.radarcns.stream.phone.TemporaryPackageKey.Builder setKey(org.radarcns.key.MeasurementKey value) {
      validate(fields()[0], value);
      this.keyBuilder = null;
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * Observation key.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'key' field and creates one if it doesn't exist yet.
     * Observation key.
     * @return This builder.
     */
    public org.radarcns.key.MeasurementKey.Builder getKeyBuilder() {
      if (keyBuilder == null) {
        if (hasKey()) {
          setKeyBuilder(org.radarcns.key.MeasurementKey.newBuilder(key));
        } else {
          setKeyBuilder(org.radarcns.key.MeasurementKey.newBuilder());
        }
      }
      return keyBuilder;
    }

    /**
     * Sets the Builder instance for the 'key' field
     * Observation key.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.radarcns.stream.phone.TemporaryPackageKey.Builder setKeyBuilder(org.radarcns.key.MeasurementKey.Builder value) {
      clearKey();
      keyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'key' field has an active Builder instance
     * Observation key.
     * @return True if the 'key' field has an active Builder instance
     */
    public boolean hasKeyBuilder() {
      return keyBuilder != null;
    }

    /**
      * Clears the value of the 'key' field.
      * Observation key.
      * @return This builder.
      */
    public org.radarcns.stream.phone.TemporaryPackageKey.Builder clearKey() {
      key = null;
      keyBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'packageName' field.
      * Package name.
      * @return The value.
      */
    public java.lang.String getPackageName() {
      return packageName;
    }

    /**
      * Sets the value of the 'packageName' field.
      * Package name.
      * @param value The value of 'packageName'.
      * @return This builder.
      */
    public org.radarcns.stream.phone.TemporaryPackageKey.Builder setPackageName(java.lang.String value) {
      validate(fields()[1], value);
      this.packageName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'packageName' field has been set.
      * Package name.
      * @return True if the 'packageName' field has been set, false otherwise.
      */
    public boolean hasPackageName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'packageName' field.
      * Package name.
      * @return This builder.
      */
    public org.radarcns.stream.phone.TemporaryPackageKey.Builder clearPackageName() {
      packageName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TemporaryPackageKey build() {
      try {
        TemporaryPackageKey record = new TemporaryPackageKey();
        if (keyBuilder != null) {
          record.key = this.keyBuilder.build();
        } else {
          record.key = fieldSetFlags()[0] ? this.key : (org.radarcns.key.MeasurementKey) defaultValue(fields()[0]);
        }
        record.packageName = fieldSetFlags()[1] ? this.packageName : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TemporaryPackageKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<TemporaryPackageKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TemporaryPackageKey>
    READER$ = (org.apache.avro.io.DatumReader<TemporaryPackageKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
